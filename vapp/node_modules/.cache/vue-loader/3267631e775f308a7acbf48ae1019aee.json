{"remainingRequest":"C:\\Users\\Jephias T Mundondo\\OneDrive\\Desktop\\drugApp\\vapp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Jephias T Mundondo\\OneDrive\\Desktop\\drugApp\\vapp\\src\\Toast.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Jephias T Mundondo\\OneDrive\\Desktop\\drugApp\\vapp\\src\\Toast.vue","mtime":1611692040690},{"path":"C:\\Users\\Jephias T Mundondo\\OneDrive\\Desktop\\drugApp\\vapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Jephias T Mundondo\\OneDrive\\Desktop\\drugApp\\vapp\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Jephias T Mundondo\\OneDrive\\Desktop\\drugApp\\vapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Jephias T Mundondo\\OneDrive\\Desktop\\drugApp\\vapp\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n\r\n//import { generateStore, EventActions } from '@drizzle/store';\r\n\r\n//import  Toasted from 'vue-toasted';\r\n//import Vue from 'vue';\r\n//Vue.use('Toasted');\r\n\r\n\r\n\r\n\r\nexport default {\r\n    name: 'Toast',\r\n  \r\n    \r\n    mounted(){\r\n     /*   const contractEventNotifier = store => next => action => {\r\n  if (action.type === EventActions.EVENT_FIRED) {\r\n    const contract = action.name\r\n    const contractEvent = action.event.event\r\n    const message = action.event.returnValues._message\r\n    const display = `${contract}(${contractEvent}): ${message}`\r\n\r\n    toast.success(display, { position: toast.POSITION.TOP_RIGHT })\r\n  }\r\n  return next(action)\r\n}*/\r\n        const contractEventHandler = ({contractName , eventName , data}) =>{\r\n            \r\n         if(eventName == 'registerManufacturers'){\r\n           \r\n\r\n            const display = `${contractName}(${eventName}):${data._names} , ${data._accounts}`;\r\n          alert(`${contractName}(${eventName}):${data._names} , ${data._accounts}`) ;\r\n          const subOptions = {duration:3000} ;\r\n          this.$toasted.show(display , subOptions);\r\n         }\r\n         \r\n          \r\n        \r\n\r\n        \r\n        }\r\n        \r\n        this.$drizzleEvents.$on('drizzle/contractEvent' , payload =>{\r\n        contractEventHandler(payload) ;\r\n        \r\n        }\r\n        \r\n        );\r\n    \r\n    },\r\n    \r\n   \r\n    }\r\n\r\n\r\n\r\n\r\n",{"version":3,"sources":["Toast.vue"],"names":[],"mappings":";;;;;;AAMA;;AAEA;AACA;AACA;;;;;AAKA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;;;;;AAMA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;;AAGA","file":"Toast.vue","sourceRoot":"src","sourcesContent":["<template>\r\n<section></section>\r\n\r\n    \r\n</template>\r\n<script>\r\n//import { generateStore, EventActions } from '@drizzle/store';\r\n\r\n//import  Toasted from 'vue-toasted';\r\n//import Vue from 'vue';\r\n//Vue.use('Toasted');\r\n\r\n\r\n\r\n\r\nexport default {\r\n    name: 'Toast',\r\n  \r\n    \r\n    mounted(){\r\n     /*   const contractEventNotifier = store => next => action => {\r\n  if (action.type === EventActions.EVENT_FIRED) {\r\n    const contract = action.name\r\n    const contractEvent = action.event.event\r\n    const message = action.event.returnValues._message\r\n    const display = `${contract}(${contractEvent}): ${message}`\r\n\r\n    toast.success(display, { position: toast.POSITION.TOP_RIGHT })\r\n  }\r\n  return next(action)\r\n}*/\r\n        const contractEventHandler = ({contractName , eventName , data}) =>{\r\n            \r\n         if(eventName == 'registerManufacturers'){\r\n           \r\n\r\n            const display = `${contractName}(${eventName}):${data._names} , ${data._accounts}`;\r\n          alert(`${contractName}(${eventName}):${data._names} , ${data._accounts}`) ;\r\n          const subOptions = {duration:3000} ;\r\n          this.$toasted.show(display , subOptions);\r\n         }\r\n         \r\n          \r\n        \r\n\r\n        \r\n        }\r\n        \r\n        this.$drizzleEvents.$on('drizzle/contractEvent' , payload =>{\r\n        contractEventHandler(payload) ;\r\n        \r\n        }\r\n        \r\n        );\r\n    \r\n    },\r\n    \r\n   \r\n    }\r\n\r\n\r\n\r\n\r\n</script>\r\n\r\n \r\n<style scoped>\r\n\r\n</style>"]}]}